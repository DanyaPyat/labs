import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Page configuration
st.set_page_config(
    page_title="–ê–≥—Ä–æ-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞",
    page_icon="üåª",
    layout="wide",
    initial_sidebar_state="expanded",
)


# Load data
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("E:\\uni\\anal\\lab3\\out.csv")
        df["year_week"] = (
            df["year"].astype(str) + "-W" + df["week"].astype(int).astype(str)
        )
        df["date"] = pd.to_datetime(df["year_week"] + "-1", format="%Y-W%W-%w")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return pd.DataFrame()


data = load_data()

# Initialize parameters
default_params = {
    "ts": "VCI",
    "region": "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞",
    "weeks": (1, 52),
    "years": (data["year"].min(), data["year"].max()),
}

if "params" not in st.session_state:
    st.session_state.params = default_params.copy()

# Sidebar
with st.sidebar:
    st.header("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")

    if st.button("–°–∫–∏–Ω—É—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö", use_container_width=True):
        st.session_state.params = default_params.copy()
        st.rerun()

    st.divider()

    st.session_state.params["ts"] = st.selectbox(
        "–í–∏–±—ñ—Ä –º–µ—Ç—Ä–∏–∫–∏",
        options=["VCI", "TCI", "VHI"],
        index=["VCI", "TCI", "VHI"].index(st.session_state.params["ts"]),
        help="–û–±–µ—Ä—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
    )

    st.session_state.params["region"] = st.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å",
        options=data["region_name"].unique(),
        index=list(data["region_name"].unique()).index(
            st.session_state.params["region"]
        ),
        help="–§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º.",
    )

    st.divider()

    st.session_state.params["weeks"] = st.slider(
        "–î—ñ–∞–ø–∞–∑–æ–Ω —Ç–∏–∂–Ω—ñ–≤",
        min_value=1,
        max_value=52,
        value=st.session_state.params["weeks"],
        format="–¢–∏–∂–¥–µ–Ω—å %d",
        help="–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
    )

    st.session_state.params["years"] = st.slider(
        "–î—ñ–∞–ø–∞–∑–æ–Ω —Ä–æ–∫—ñ–≤",
        min_value=int(data["year"].min()),
        max_value=int(data["year"].max()),
        value=st.session_state.params["years"],
        format="–†—ñ–∫ %d",
        help="–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.",
    )

    st.divider()

    # Sorting options
    with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"):
        asc = st.checkbox(
            "–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º", value=False, help="–í—ñ–¥ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ –¥–æ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ."
        )
        desc = st.checkbox(
            "–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º", value=False, help="–í—ñ–¥ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ."
        )

# Main panel
try:
    filtered = data[
        (data["region_name"] == st.session_state.params["region"])
        & (data["week"].between(*st.session_state.params["weeks"]))
        & (data["year"].between(*st.session_state.params["years"]))
    ]

    if asc and desc:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ª–∏—à–µ –æ–¥–∏–Ω —Ç–∏–ø —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.")
    elif asc:
        filtered = filtered.sort_values(st.session_state.params["ts"], ascending=True)
    elif desc:
        filtered = filtered.sort_values(st.session_state.params["ts"], ascending=False)

except Exception as e:
    st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: {str(e)}")

tab1, tab2, tab3 = st.tabs(
    ["üìã –¢–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö", "üìà –î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω", "üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤"]
)

with tab1:
    st.subheader("–î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
    st.dataframe(
        filtered[
            ["date", "year", "week", st.session_state.params["ts"], "region_name"]
        ],
        column_config={
            "date": st.column_config.DateColumn("–î–∞—Ç–∞"),
            "year": "–†—ñ–∫",
            "week": "–¢–∏–∂–¥–µ–Ω—å",
            st.session_state.params["ts"]: f"–ó–Ω–∞—á–µ–Ω–Ω—è {st.session_state.params['ts']}",
            "region_name": "–†–µ–≥—ñ–æ–Ω",
        },
        use_container_width=True,
        hide_index=True,
    )

with tab2:
    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω")
    if not filtered.empty:
        plt.figure(figsize=(10, 6))
        sns.lineplot(
            data=filtered,
            x="date",
            y=st.session_state.params["ts"],
            marker="o",
            color="green",
        )
        plt.title(
            f"–î–∏–Ω–∞–º—ñ–∫–∞ {st.session_state.params['ts']} –¥–ª—è {st.session_state.params['region']}"
        )
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É")
        plt.grid()
        st.pyplot(plt)
    else:
        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

with tab3:
    st.subheader("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤")
    try:
        # Filter data for selected weeks and years
        compare_data = data[
            (data["week"].between(*st.session_state.params["weeks"]))
            & (data["year"].between(*st.session_state.params["years"]))
        ]

        # Prepare data for bar chart
        bar_data = (
            compare_data.groupby("region_name")[st.session_state.params["ts"]]
            .mean()
            .reset_index()
        )

        # Create bar chart
        plt.figure(figsize=(12, 6))
        sns.barplot(
            data=bar_data,
            x="region_name",
            y=st.session_state.params["ts"],
            palette="viridis",
        )
        plt.title(f"–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è {st.session_state.params['ts']} –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö")
        plt.xlabel("–û–±–ª–∞—Å—Ç—å")
        plt.ylabel("–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É")
        plt.xticks(rotation=45, ha="right")
        plt.grid(axis="y")
        st.pyplot(plt)

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞: {str(e)}")
